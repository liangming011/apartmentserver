#JDBC 配置
spring.datasource.url=jdbc:mysql://localhost:3306/apartment?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8&useSSL=false
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

#连接池配置
#连接池初始化大小
spring.datasource.druid.initial-size=5 
spring.datasource.druid.max-active=20
#最小空闲连接数
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
#和上面的等价
spring.datasource.druid.max-open-prepared-statements=20
# 验证druid链接和验证超时时间
# 如何设置为让连接池知道数据库已经断开了，并且自动测试连接查询
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout=30000
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 配置一个连接在池中最大生存的时间，单位是毫秒
spring.datasource.druid.max-evictable-idle-time-millis=600000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j2
# 合并多个DruidDataSource的监控数据
# spring.datasource.druid.use-global-data-source-stat=true

# 监控配置
# Druid内置提供了一个StatViewServlet用于展示Druid的统计信息。
# 是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# 允许清空统计数据
spring.datasource.druid.stat-view-servlet.reset-enable=true
# 用户名
spring.datasource.druid.stat-view-servlet.login-username=druid
# 密码
spring.datasource.druid.stat-view-servlet.login-password=druid
# StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数：不支持IPV6
# 一：deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。
# 二：如果allow没有配置或者为空，则允许所有访问
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1,localhost
spring.datasource.druid.stat-view-servlet.deny=

# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
# 配置内容：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter
# 是否启用StatFilter默认值false
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
#不统计这些请求数据
spring.datasource.druid.web-stat-filter.exclusions="*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
#你可以关闭session统计功能 false
spring.datasource.druid.web-stat-filter.session-stat-enable=true
#缺省sessionStatMaxCount是1000个
spring.datasource.druid.web-stat-filter.session-stat-max-count=2000
#你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁。
#spring.datasource.druid.web-stat-filter.principal-session-name=
#与上面类似
spring.datasource.druid.web-stat-filter.principal-cookie-name=Authorization
#druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true

# Druid内置提供一个StatFilter，用于统计监控信息。要想使自定义 Filter 配置生效需要将对应 Filter 的 enabled 设置为 true ，
# Druid Spring Boot Starter 默认禁用 StatFilter，你也可以将其 enabled 设置为 true 来启用它。

# 配置StatFilter 打开监控统计功能
# 配置内容：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter
spring.datasource.druid.filter.stat.enabled=true
spring.datasource.druid.filter.stat.merge-sql=true
spring.datasource.druid.filter.stat.connection-stack-trace-enable=true
spring.datasource.druid.filter.stat.db-type=mysql
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=10000

# 怎么配置防御SQL注入攻击
# 配置WallFilter：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter
spring.datasource.druid.filter.wall.enabled=true
spring.datasource.druid.filter.wall.db-type=mysql
spring.datasource.druid.filter.wall.config.drop-table-allow=false
spring.datasource.druid.filter.wall.log-violation=true
spring.datasource.druid.filter.wall.throw-exception=false

# 怎么配置防御SQL注入攻击
spring.datasource.druid.filter.log4j2.enabled=true
# 所有DataSource相关的日志
#spring.datasource.druid.filter.slf4j.data-source-log-enabled=true
# 所有连接上发生异常的日志
spring.datasource.druid.filter.log4j2.connection-log-error-enabled=true
spring.datasource.druid.filter.log4j2.statement-log-error-enabled=true
spring.datasource.druid.filter.log4j2.statement-create-after-log-enabled=false
spring.datasource.druid.filter.log4j2.statement-close-after-log-enabled=false
spring.datasource.druid.filter.log4j2.result-set-open-after-log-enabled=false
spring.datasource.druid.filter.log4j2.result-set-close-after-log-enabled=false
